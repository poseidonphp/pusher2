name: Create Release

on:
  push:
    branches:
      - main
permissions:
    contents: write
    issues: write
    pull-requests: write
    packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_tag: ${{ steps.create_tag.outputs.new_release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensures all tags are fetched

      - name: Get and bump version
        id: bump_version
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "Latest tag: $latest_tag"
          # Extract major, minor, and patch numbers
          major=$(echo $latest_tag | cut -d'.' -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d'.' -f2)
          patch=$(echo $latest_tag | cut -d'.' -f3)
          # Increment patch version
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"
          echo "New tag: $new_tag"
          echo "version=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ env.version }}
          git push origin ${{ env.version }}
          echo "new_release_tag=${{ env.version }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          body: |
            This release was automatically created after merging changes into the main branch.
          draft: false
          prerelease: false
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [ linux, darwin ]
        goarch: [ amd64, arm64 ]
        exclude:
          - goarch: "amd64"
            goos: darwin
          - goarch: "arm64"
            goos: linux
    #          - goarch: "386"
    #            goos: darwin
    #          - goarch: arm64
    #            goos: windows
    steps:
      - uses: actions/checkout@v4
      - uses: wangyoucao577/go-release-action@v1
        with:
          release_tag: ${{ needs.create-release.outputs.new_release_tag }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          #          goversion: "https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz"
          project_path: "./cmd/pusher/"
          binary_name: "socket_rush_${{ matrix.goos }}_${{ matrix.goarch }}"
          extra_files: LICENSE README.md
          ldflags: "-s -w -X main.version=${{ needs.create-release.outputs.new_release_tag }}"